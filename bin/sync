#!/usr/bin/env php
<?php

$workingPath = getcwd();

require __DIR__.'/../vendor/autoload.php';

$files = new Illuminate\Filesystem\Filesystem();

$files->deleteDirectory("{$workingPath}/skeleton");

Symfony\Component\Process\Process::fromShellCommandline(
    'composer create-project "laravel/laravel:8.x-dev" skeleton --no-scripts --no-plugins --quiet --no-install', $workingPath
)->mustRun();

Illuminate\Support\Collection::make([
    'config/*.php',
    'database/.gitignore',
    'database/migrations/2014_10_12_000000_create_users_table.php',
    'database/migrations/2014_10_12_100000_create_password_resets_table.php',
    'database/migrations/2019_08_19_000000_create_failed_jobs_table.php',
    'resources/lang/en/*.php',
    'resources/lang/*.json',
    'resources/views/*',
    'public/index.php',
    'server.php',
    'tests/CreatesApplication.php',
])->transform(fn ($file) => "{$workingPath}/skeleton/{$file}")
->map(fn ($file) => str_contains($file, '*') ? [...$files->glob($file)] : $file)
->flatten()
->each(function ($file) use ($files, $workingPath) {
    $files->copy($file, "{$workingPath}/laravel".Illuminate\Support\Str::after($file, "{$workingPath}/skeleton"));
});
$files->delete("{$workingPath}/laravel/config/sanctum.php");
$files->move("{$workingPath}/laravel/database/migrations/2014_10_12_000000_create_users_table.php", "{$workingPath}/database/migrations/laravel/2014_10_12_000000_testbench_create_users_table.php");
$files->move("{$workingPath}/laravel/database/migrations/2014_10_12_100000_create_password_resets_table.php", "{$workingPath}/database/migrations/laravel/2014_10_12_100000_testbench_create_password_resets_table.php");
$files->move("{$workingPath}/laravel/database/migrations/2019_08_19_000000_create_failed_jobs_table.php", "{$workingPath}/database/migrations/laravel/2019_08_19_000000_testbench_create_failed_jobs_table.php");

foreach ([
    '2014_10_12_000000_testbench_create_users_table',
    '2014_10_12_100000_testbench_create_password_resets_table',
    '2019_08_19_000000_testbench_create_failed_jobs_table',
] as $migration) {
    $files->replaceInFile('class Create', 'class TestbenchCreate', "{$workingPath}/database/migrations/laravel/{$migration}.php");
}

transform([
    "getcwd()" => "__DIR__.'/public'",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/server.php"));

transform([
    "env('APP_ENV', 'production')" => "env('APP_ENV', 'testing')",
    PHP_EOL.'        App\Providers' => PHP_EOL.'        // App\Providers',
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/config/app.php"));

transform([
    "'model' => App\Models\User::class" => "'model' => Illuminate\Foundation\Auth\User::class",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/config/auth.php"));

transform([
    "env('CACHE_DRIVER', 'file')" => "env('CACHE_DRIVER', 'array')",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/config/cache.php"));

transform([
    "env('SESSION_DRIVER', 'file')" => "env('SESSION_DRIVER', 'array')",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/config/session.php"));

$files->copy("{$workingPath}/skeleton/database/factories/UserFactory.php", "{$workingPath}/src/Factories/UserFactory.php");
transform([
    'namespace Database\Factories;' => 'namespace Orchestra\Testbench\Factories;',
    'use Illuminate\Database\Eloquent\Factories\Factory;' => 'use Illuminate\Database\Eloquent\Factories\Factory;'.PHP_EOL.'use Illuminate\Foundation\Auth\User;',
    'class UserFactory extends Factory' => '/**
 * @phpstan-type TModel \Illuminate\Foundation\Auth\User
 */
class UserFactory extends Factory',
        '    }
}'.PHP_EOL => '    }

    /**
     * Get the name of the model that is generated by the factory.
     *
     * @return class-string<\Illuminate\Database\Eloquent\Model|TModel>
     */
    public function modelName()
    {
        return $this->model ?? config(\'auth.providers.users.model\', User::class);
    }
}
',
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/src/Factories/UserFactory.php"));

$files->deleteDirectory("{$workingPath}/skeleton");
